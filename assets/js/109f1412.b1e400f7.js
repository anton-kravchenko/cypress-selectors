(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[559],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6105:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={},s={unversionedId:"motivation",id:"motivation",isDocsHomePage:!1,title:"Motivation",description:"The idea behind the library is to provide a convenient way for defining Cypress selectors declaratively.",source:"@site/docs/motivation.md",sourceDirName:".",slug:"/motivation",permalink:"/cypress-selectors/motivation",editUrl:"https://github.com/anton-kravchenko/cypress-selectors/edit/main/docs/docs/motivation.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Cypress Selectors",permalink:"/cypress-selectors/"},next:{title:"Basic usage",permalink:"/cypress-selectors/getting-started/basic-usage"}},c=[{value:"Hardcode &#39;em all \ud83e\udd2a",id:"hardcode-em-all-\ud83e\udd2a",children:[]},{value:"Store in constants and then reuse \ud83e\udd14",id:"store-in-constants-and-then-reuse-",children:[]},{value:"Define a custom action for selecting elements \ud83e\uddd0",id:"define-a-custom-action-for-selecting-elements-\ud83e\uddd0",children:[]},{value:"Define selectors declaratively \ud83d\ude3b",id:"define-selectors-declaratively-",children:[]}],l={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The idea behind the library is to provide a convenient way for defining Cypress selectors declaratively."),(0,o.kt)("p",null,"You can find the list of possible ways for dealing with selectors in Cypress in ",(0,o.kt)("a",{parentName:"p",href:"https://antosha-kravchenko.medium.com/dealing-with-selectors-in-cypress-8b9ac0dfe240"},"the article")," on Medium."),(0,o.kt)("p",null,"Here is a brief breakdown of how you can work with selectors:"),(0,o.kt)("h2",{id:"hardcode-em-all-\ud83e\udd2a"},"Hardcode 'em all \ud83e\udd2a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"it('should submit feedback form', () => {\n  cy.get('.feedback-input').type(FEEDBACK);\n  cy.get('.submit-button').click();\n});\n")),(0,o.kt)("p",null,"The easiest and probably not the best way."),(0,o.kt)("h2",{id:"store-in-constants-and-then-reuse-"},"Store in constants and then reuse \ud83e\udd14"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const SUBMIT_BUTTON_SELECTOR = '.submit-button';\nconst FEEDBACK_INPUT_SELECTOR = '.feedback-input';\n\nit('should submit feedback form', () => {\n  cy.get(FEEDBACK_INPUT_SELECTOR).type(FEEDBACK);\n  cy.get(SUBMIT_BUTTON_SELECTOR).click();\n});\n")),(0,o.kt)("p",null,"Better than hardcoding but not convenient to define ",(0,o.kt)("em",{parentName:"p"},"child-parent")," relationship."),(0,o.kt)("h2",{id:"define-a-custom-action-for-selecting-elements-\ud83e\uddd0"},"Define a custom action for selecting elements \ud83e\uddd0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="cypress/support/commands.ts"',title:'"cypress/support/commands.ts"'},"const INTERNAL_ID_ATTRIBUTE = `cypress-id`;\n\n/* Adds support for `getByInternalId` command that looks up elements\n   based on `INTERNAL_ID_ATTRIBUTE` attribute */\nCypress.Commands.add('getByInternalId', { prevSubject: 'optional' }, (subject, internalId) =>\n  subject\n    ? /* Lookup within the given node */\n      subject.find(`[${INTERNAL_ID_ATTRIBUTE}=${internalId}]`)\n    : /* Look up globally */\n      cy.get(`[${INTERNAL_ID_ATTRIBUTE}=${internalId}]`),\n);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="cypress/integration/test.ts"',title:'"cypress/integration/test.ts"'},"const FEEDBACK_FORM_SELECTORS = {\n  getSubmitButton: () => cy.getByInternalId('submit'),\n  getFeedbackInput: () => cy.getByInternalId('feedback'),\n};\n\nit('should submit feedback form', () => {\n  cy.get(FEEDBACK_FORM_SELECTORS.getSubmitButton()).type(FEEDBACK);\n  cy.get(FEEDBACK_FORM_SELECTORS.getFeedbackInput()).click();\n});\n")),(0,o.kt)("p",null,"Even better since it unifies the way of querying elements and hides some of the complexity."),(0,o.kt)("h2",{id:"define-selectors-declaratively-"},"Define selectors declaratively \ud83d\ude3b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class Selectors {\n  @ById('main') static parent: Selector;\n  @ByClass('button', { parent: Selectors.parent }) static children: Selector;\n}\n")),(0,o.kt)("p",null,"Seems to be the most optimal approach since:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"it allows to define selectors declaratively and concisely (no more constants / selector functions / custom actions / e.t.c)"),(0,o.kt)("li",{parentName:"ul"},"it makes it easy to access and reuse selectors - just access your selectors by reference and the lib will do querying for you"),(0,o.kt)("li",{parentName:"ul"},"it makes it easy to specify ",(0,o.kt)("em",{parentName:"li"},"child-parent")," relationship")),(0,o.kt)("p",null,"The API is inspired by ",(0,o.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/By.html"},"Selenium")," selectors."))}p.isMDXComponent=!0}}]);